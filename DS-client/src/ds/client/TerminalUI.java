package ds.client;

import ds.client.DSClient;
import java.awt.event.KeyEvent;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.InputMap;
import javax.swing.JFrame;
import javax.swing.KeyStroke;
import javax.swing.WindowConstants;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author user
 */
public class TerminalUI extends javax.swing.JFrame {

    /**
     * Creates new form TerminalUI
     */
    DSClient client = null;
    BufferedInputStream bis = null;
    StringBuilder stb = new StringBuilder();
    boolean disableBackspace = false;

    public TerminalUI() throws IOException {
        initComponents();
        initCore();

    }

    private void initCore() {
        try {
            this.client = new DSClient("localhost", 9999);
        } catch (IOException ex) {
//            Logger.getLogger(TerminalUI.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Server not found!");
            jTextAreaConsole.append("Server not found!");
            jTextAreaConsole.append("Exiting...");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaConsole = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setBackground(new java.awt.Color(0, 0, 0));

        jTextAreaConsole.setBackground(new java.awt.Color(0, 153, 153));
        jTextAreaConsole.setColumns(20);
        jTextAreaConsole.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jTextAreaConsole.setForeground(new java.awt.Color(255, 255, 255));
        jTextAreaConsole.setLineWrap(true);
        jTextAreaConsole.setRows(5);
        jTextAreaConsole.setTabSize(4);
        jTextAreaConsole.setToolTipText("");
        jTextAreaConsole.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jTextAreaConsole.setSelectedTextColor(new java.awt.Color(0, 204, 204));
        jTextAreaConsole.setSelectionColor(new java.awt.Color(255, 255, 255));
        jTextAreaConsole.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextAreaConsoleKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextAreaConsoleKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jTextAreaConsole);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextAreaConsoleKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextAreaConsoleKeyTyped
        // TODO add your handling code here:
        // TODO add your handling code here:
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            try {
                String userInputString = stb.toString();
                stb = new StringBuilder();

                client.send(userInputString);
                if (userInputString.contains("exit")) {
                    client.disconnect(true);
                    System.exit(0);
                }
                String responseLine = client.receive();

                if (responseLine.contains("username") || responseLine.contains("password")) {
                    jTextAreaConsole.append(responseLine);
                    System.out.print(responseLine);
                } else {
                    jTextAreaConsole.append(responseLine);
                    System.out.print(responseLine);
                    System.out.println("$ ");
                    jTextAreaConsole.append("$ ");
                }
                if (responseLine.contains("exit")) {
                    client.disconnect(false);
                    System.exit(0);
                }

            } catch (IOException ex) {
                Logger.getLogger(TerminalUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (evt.getKeyChar() == KeyEvent.VK_BACK_SPACE) {
            if (stb.length() > 0) {
                stb.deleteCharAt(stb.length() - 1);
            }
        } else if (evt.getKeyChar() >= 32 && evt.getKeyChar() <= 126) {
            stb.append(evt.getKeyChar());
        }
    }//GEN-LAST:event_jTextAreaConsoleKeyTyped

    private void jTextAreaConsoleKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextAreaConsoleKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyChar() == KeyEvent.VK_BACK_SPACE) {
            if (stb.length() == 0) {
                disableBackspace = true;
                InputMap inputMap = jTextAreaConsole.getInputMap();
                inputMap.put(KeyStroke.getKeyStroke("BACK_SPACE"), "none");
            }
        } else if (disableBackspace) {
            disableBackspace = false;
            InputMap inputMap = jTextAreaConsole.getInputMap();
            inputMap.put(KeyStroke.getKeyStroke("BACK_SPACE"), "delete-previous");
        }
    }//GEN-LAST:event_jTextAreaConsoleKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TerminalUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TerminalUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TerminalUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TerminalUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    TerminalUI frame = new TerminalUI();
                    frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
                    frame.setVisible(true);

                    frame.firstWords();

                } catch (IOException ex) {
                    Logger.getLogger(TerminalUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    void firstWords() throws IOException {
        String responseLine = client.receive();

        if (responseLine.contains("username") || responseLine.contains("password")) {
            jTextAreaConsole.append(responseLine);
            System.out.print(responseLine);
        } else {
            jTextAreaConsole.append(responseLine);
            System.out.print(responseLine);
            System.out.println("$ ");
            jTextAreaConsole.append("$ ");
        }
        if (responseLine.contains("exit")) {
            client.disconnect(false);
            System.exit(0);
        }
    }

    void core() throws IOException {
        while (true) {
            // Đọc dữ liệu trả lời từ phía server
            // Bằng cách đọc luồng đầu vào của Socket tại Client.
            String responseLine;
            responseLine = client.receive();

            if (responseLine.contains("username") || responseLine.contains("password")) {
                jTextAreaConsole.append(responseLine);
                System.out.print(responseLine);
            } else {
                jTextAreaConsole.append(responseLine);
                System.out.print(responseLine);
                System.out.println("$ ");
                jTextAreaConsole.append("$ ");
            }

            Scanner sc = new Scanner(System.in);
            String usercmd = sc.nextLine();
            if (responseLine.contains("exit")) {
                client.disconnect(false);
                return;
            }
            client.send(usercmd);

            if (usercmd.contains("exit")) {
                break;
            }
        }
        client.disconnect(true);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaConsole;
    // End of variables declaration//GEN-END:variables
}
